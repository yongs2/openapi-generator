{{>partial_header}}
package {{packageName}}

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	router := gin.Default()
	AddService(router)
	return router
}

func AddService(engine *gin.Engine) *gin.RouterGroup {
	group := engine.Group("{{{basePathWithoutHost}}}")

	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			group.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			group.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			group.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			group.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			group.DELETE(route.Pattern, route.HandlerFunc)
		}
	}
	return group
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {
{{#apiInfo}}{{#apis}}{{#operations}}
	// Routes for the {{classname}} part of the API
	{{classname}} {{classname}}{{/operations}}{{/apis}}{{/apiInfo}}
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{
	{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
		{
			"{{operationId}}",
			http.Method{{httpMethod}},
			"{{{basePathWithoutHost}}}{{{path}}}",
			handleFunctions.{{classname}}.{{operationId}},
		},{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
	}
}
