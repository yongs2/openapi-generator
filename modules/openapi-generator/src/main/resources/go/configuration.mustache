{{>partial_header}}
package {{packageName}}

import (
	"context"
	"fmt"
	"net/http"
	"strings"

	common "./common"
)

// ServerVariable stores the information about a server variable
type ServerVariable struct {
	Description  string
	DefaultValue string
	EnumValues   []string
}

// ServerConfiguration stores the information about a server
type ServerConfiguration struct {
	URL string
	Description string
	Variables map[string]ServerVariable
}

// ServerConfigurations stores multiple ServerConfiguration items
type ServerConfigurations []ServerConfiguration

{{#withCustomMiddlewareFunction}}
// MiddlewareFunction provides way to implement custom middleware
type MiddlewareFunction func(*http.Request)

{{/withCustomMiddlewareFunction}}
// Configuration stores the configuration of the API client
type Configuration struct {
	Host             string            `json:"host,omitempty"`
	Scheme           string            `json:"scheme,omitempty"`
	DefaultHeader    map[string]string `json:"defaultHeader,omitempty"`
	UserAgent        string            `json:"userAgent,omitempty"`
	Debug            bool              `json:"debug,omitempty"`
	Servers          ServerConfigurations
	OperationServers map[string]ServerConfigurations
	HTTPClient       *http.Client
	{{#withCustomMiddlewareFunction}}
	Middleware       MiddlewareFunction
	{{/withCustomMiddlewareFunction}}
}

// NewConfiguration returns a new Configuration object
func NewConfiguration() *Configuration {
	cfg := &Configuration{
		DefaultHeader:    make(map[string]string),
		UserAgent:        "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}OpenAPI-Generator/{{{packageVersion}}}/go{{/httpUserAgent}}",
		Debug:            false,
		{{#servers}}
		{{#-first}}
		Servers:          ServerConfigurations{
		{{/-first}}
			{
				URL: "{{{url}}}",
				Description: "{{{description}}}{{^description}}No description provided{{/description}}",
				{{#variables}}
				{{#-first}}
				Variables: map[string]ServerVariable{
				{{/-first}}
					"{{{name}}}": ServerVariable{
						Description: "{{{description}}}{{^description}}No description provided{{/description}}",
						DefaultValue: "{{{defaultValue}}}",
						{{#enumValues}}
						{{#-first}}
						EnumValues: []string{
						{{/-first}}
							"{{{.}}}",
						{{#-last}}
						},
						{{/-last}}
						{{/enumValues}}
					},
				{{#-last}}
				},
				{{/-last}}
				{{/variables}}
			},
		{{#-last}}
		},
		{{/-last}}
		{{/servers}}
		{{#apiInfo}}
		OperationServers: map[string]ServerConfigurations{
		{{#apis}}
		{{#operations}}
		{{#operation}}
		{{#servers}}
		{{#-first}}
			"{{{classname}}}Service.{{{nickname}}}": {
		{{/-first}}
				{
					URL: "{{{url}}}",
					Description: "{{{description}}}{{^description}}No description provided{{/description}}",
					{{#variables}}
					{{#-first}}
					Variables: map[string]ServerVariable{
					{{/-first}}
						"{{{name}}}": ServerVariable{
							Description: "{{{description}}}{{^description}}No description provided{{/description}}",
							DefaultValue: "{{{defaultValue}}}",
							{{#enumValues}}
							{{#-first}}
							EnumValues: []string{
							{{/-first}}
								"{{{.}}}",
							{{#-last}}
							},
							{{/-last}}
							{{/enumValues}}
						},
					{{#-last}}
					},
					{{/-last}}
					{{/variables}}
				},
		{{#-last}}
			},
		{{/-last}}
		{{/servers}}
		{{/operation}}
		{{/operations}}
		{{/apis}}
		},
		{{/apiInfo}}
	}
	return cfg
}

// AddDefaultHeader adds a new HTTP header to the default header in the request
func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}

// URL formats template on a index using given variables
func (sc ServerConfigurations) URL(index int, variables map[string]string) (string, error) {
	if index < 0 || len(sc) <= index {
		return "", fmt.Errorf("index %v out of range %v", index, len(sc)-1)
	}
	server := sc[index]
	url := server.URL

	// go through variables and replace placeholders
	for name, variable := range server.Variables {
		if value, ok := variables[name]; ok {
			found := bool(len(variable.EnumValues) == 0)
			for _, enumValue := range variable.EnumValues {
				if value == enumValue {
					found = true
				}
			}
			if !found {
				return "", fmt.Errorf("the variable %s in the server URL has invalid value %v. Must be %v", name, value, variable.EnumValues)
			}
			url = strings.Replace(url, "{"+name+"}", value, -1)
		} else {
			url = strings.Replace(url, "{"+name+"}", variable.DefaultValue, -1)
		}
	}
	return url, nil
}

// ServerURL returns URL based on server settings
func (c *Configuration) ServerURL(index int, variables map[string]string) (string, error) {
	return c.Servers.URL(index, variables)
}

// ServerURLWithContext returns a new server URL given an endpoint
func (c *Configuration) ServerURLWithContext(ctx context.Context, endpoint string) (string, error) {
	sc, ok := c.OperationServers[endpoint]
	if !ok {
		sc = c.Servers
	}

	if ctx == nil {
		return sc.URL(0, nil)
	}

	index, err := common.GetServerOperationIndex(ctx, endpoint)
	if err != nil {
		return "", err
	}

	variables, err := common.GetServerOperationVariables(ctx, endpoint)
	if err != nil {
		return "", err
	}

	return sc.URL(index, variables)
}
