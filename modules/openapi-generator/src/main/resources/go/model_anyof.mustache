// {{classname}} {{{description}}}{{^description}}struct for {{{classname}}}{{/description}}
type {{classname}} struct {
	{{#anyOf}}
	{{{.}}} *{{{.}}}
	{{/anyOf}}
}

// New function for cases including anyOf and string
func New{{classname}}(v string) *{{classname}} {
	this := {{classname}}{}
	{{#anyOf}}
	if var{{{.}}}, err := New{{{.}}}FromValue(v); err == nil {
		this.{{{.}}} = var{{{.}}}
		return &this
	}
	{{/anyOf}}
	return &this
}

// Get function for cases including anyOf and string
func (obj *{{classname}}) Get() string {
	if obj == nil {	// fix null exception
		return ""
	}
	{{#anyOf}}
	if obj.{{{.}}} != nil {
		return string(*obj.{{{.}}})
	}
	{{/anyOf}}
	return "" // no data in anyOf schemas
}

// IsSet function for cases including anyOf and string
func (obj *{{classname}}) IsSet() bool {
	if obj == nil {	// fix null exception
		return false
	}
	{{#anyOf}}
	if obj.{{{.}}} != nil {
		return true
	}
	{{/anyOf}}
	return false // no data in anyOf schemas
}

// Unmarshal JSON data into any of the pointers in the struct
func (obj *{{classname}}) UnmarshalJSON(data []byte) error {
	var err error
	{{#isNullable}}
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	{{/isNullable}}
	{{#discriminator}}
	{{#mappedModels}}
	{{#-first}}
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	{{/-first}}
	// check if the discriminator value is '{{{mappingName}}}'
	if jsonDict["{{{propertyBaseName}}}"] == "{{{mappingName}}}" {
		// try to unmarshal JSON data into {{{modelName}}}
		err = json.Unmarshal(data, &obj.{{{modelName}}})
		if err == nil {
			json{{{modelName}}}, _ := json.Marshal(obj.{{{modelName}}})
			if string(json{{{modelName}}}) == "{}" { // empty struct
				obj.{{{modelName}}} = nil
			} else {
				return nil // data stored in obj.{{{modelName}}}, return on the first match
			}
		} else {
			obj.{{{modelName}}} = nil
		}
	}

	{{/mappedModels}}
	{{/discriminator}}
	{{#anyOf}}
	// try to unmarshal JSON data into {{{.}}}
	err = json.Unmarshal(data, &obj.{{{.}}})
	if err == nil {
		json{{{.}}}, _ := json.Marshal(obj.{{{.}}})
		if string(json{{{.}}}) == "{}" { // empty struct
			obj.{{{.}}} = nil
		} else {
			return nil // data stored in obj.{{{.}}}, return on the first match
		}
	} else {
		obj.{{{.}}} = nil
	}

	{{/anyOf}}
	return fmt.Errorf("Data failed to match schemas in anyOf({{classname}})")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (obj {{classname}}) MarshalJSON() ([]byte, error) {
{{#anyOf}}
	if obj.{{{.}}} != nil {
		return json.Marshal(&obj.{{{.}}})
	}

{{/anyOf}}
	return nil, nil // no data in anyOf schemas
}

{{>nullable_model}}